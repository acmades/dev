module Phoityne.Example.FuncSpec where
import SpecHelper


testFindNb m r = findNb m `shouldBe` r
testScramble s1 s2 expected = scramble s1 s2 `shouldBe` expected

spec :: Spec
spec = do
  describe "Go go go" $
    it "Test start!" $
    True `shouldBe` True

  describe "productFib" $
    it "should work for some examples" $ do
    productFib 4895  `shouldBe` ( 55,  89, True)
    productFib 5895  `shouldBe` ( 89, 144, False)
    productFib 0     `shouldBe` (  0,   1, True)
    productFib 15000 `shouldBe` (144, 233, False)
    productFib 4     `shouldBe` (  2,   3, False)

  describe "findNb" $
    it "should work for some examples" $ do
    testFindNb  4183059834009 2022
    testFindNb  24723578342962 (-1)
    testFindNb  135440716410000 4824
    testFindNb  40539911473216 3568
    testFindNb  26825883955641 3218
    testFindNb  41364076483082 (-1)
    testFindNb  9541025211025 2485
    testFindNb  112668204662785 (-1)
    testFindNb  79172108332642 (-1)
    testFindNb  1788719004901 (-1)
    testFindNb  131443152397956 4788
    testFindNb  1801879360282 (-1)
    testFindNb  18262169777476 2923
    testFindNb  11988186060816 2631
    testFindNb  826691919076 1348
    testFindNb  36099801072722 (-1)
    testFindNb  171814395026 (-1)
    testFindNb  637148782657 (-1)
    testFindNb  6759306226 (-1)
    testFindNb  33506766981009 3402
    testFindNb  108806345136785 (-1)
    testFindNb  14601798712901 (-1)
    testFindNb  56454575667876 3876
    testFindNb  603544088161 1246
    testFindNb  21494785321 541
    testFindNb  1025292944081385001 45001
    testFindNb  10252519345963644753025 450010
    testFindNb  10252519345963644753026 (-1)
    testFindNb  102525193459636447530260 (-1)
    testFindNb  1025247423603083074023000250000 45001000
    testFindNb  43053036719020064100 114555
    testFindNb  4 (-1)
    testFindNb  16 (-1)

  describe "scramble" $
    it "should work for some examples" $ do
      testScramble "rkqodlw"           "world"       True
      testScramble "cedewaraaossoqqyt" "codewars"    True
      testScramble "katas"             "steak"       False
      testScramble "scriptjavx"        "javascript"  False
      testScramble "scriptingjava"     "javascript"  True
      testScramble "scriptsjava"       "javascripts" True
      testScramble "javscripts"        "javascript"  False
      testScramble "aabbcamaomsccdd"   "commas"      True
      testScramble "commas"            "commas"      True
      testScramble "sammoc"            "commas"      True

  describe "findMissingLetter" $
    it "should work with example tests" $ do
      findMissingLetter ['a','b','c','d','f'] `shouldBe` 'e'
      findMissingLetter ['O','Q','R','S'] `shouldBe` 'P'
      findMissingLetter ['b','d'] `shouldBe` 'c'

  describe "zeros" $ do
    it "0! has 0 trailing zeros" $
      zeros 0 `shouldBe` 0
    it "6! has 1 trailing zeros" $
      zeros 6 `shouldBe` 1
    it "30! has 7 trailing zeros" $
      zeros 30 `shouldBe` 7
    it "100! has 24 trailing zeros" $
      zeros 100 `shouldBe` 24
    it "1000! has 249 trailing zeros" $
      zeros 1000 `shouldBe` 249
    it "100000! has 24999 trailing zeros" $
      zeros 100000 `shouldBe` 24999
    it "1000000000! has 249999998 trailing zeros" $
      zeros 1000000000 `shouldBe` 249999998

  describe "maxSequence" $
    it "Should work" $ do
    maxSequence [] `shouldBe` 0
    maxSequence [1..1000] `shouldBe` sum [1..1000]
    maxSequence (map negate [1..1000]) `shouldBe` 0
    maxSequence [-2, 1, -3, 4, -1, 2, 1, -5, 4] `shouldBe` 6
    maxSequence [-420,929,-522,-257,-145,35,284,-146,-507,305,615,504,-556,-115,811,-496,499,469,-671,525,287,-609,-713,671,-958,596,-13,984,703,526,284,646,-836,-820,937,-954,280,-916,-55,220,19,-52,-640,-686,642,497,271,849,-675,695,346,814,609,-981,805,811,-471,-519,888,-817,989,625,-821,95,-358,251,467,686,523,611,-949,201,-337,-192,-669,-163,23,-185,-175,-113,376,-321,-859,-999,-290,347,-329,279,-779,861,478,590,300,-341,322,386,-734,305,-795,333,-564,-400,-544,-751,31,447,250,96,-311,10,178,59,954,94,792,110,493,-603,451,434,444,405,677,922,-937,-885,-152,196,238,-438,101,394,327,-416,286,207,-597,-599,-147,674,965,172,432,908,842,-199,458,-407,-153,23,279,-584,-463,-612,563,575,-635,386,866,-956,801,-293,-916,-253,-88,414,381,-393,768,-10,373,-519,-379,938,591,-188,-801,-873,-15,923,716,-529,-672,-252,18,105,726,-696,-407,-110,768,-220,-936,-12,766,-210,-644,85,-890,545,-516,-8,-333,206,77,858,-223,-80,757,767,831,-10,948,256,881,-302,-939,-818,598,-881,771,-381,493,-836,119,835,-946,-106,286,620,414,943,-195,-731,466,203,74,-812,120,-392,443,-920,670,390,608,-713,-299,-830,312,-332,-938,461,37,-88,-332,-819,-944,-551,378,823,-549,-459,123,-298,422,-422,70,290,-606,361,-591,878,-727,-704,393,-627,535,-428,-812,-481,-52,-184,571,-511,-585,953,397,-229,-161,-723,-403,-411,-464,-43,-595,-845,-460,716,8,582,-589,-160,175,-675,-609,0,-218,-672,950,-470,576,-252,-481,-781,535,-471,251,800,295,-487,-485,928,-347,-378,600,-146,794,-691,-86,-942,-292,-18,955,-506,-369,601,-991,-664,474,-233,117,198,-35,482,604,-297,-216,-470,-865,-763,787,648,898,-334,786,-847,659,-574,225,-383,-427,-858,-105,482,853,-583,3,-677,-770,639,843,649,104,693,450,65,-922,-991,874,-313,-386,774,675,-800,1,-234,274,-110,266,-83,-315,-207,975,835,543,142,-181,-206,-414,-693,869,-242,-510,-82,-359,185,409,-113,-116,436,437,-643,147,-596,18,-779,230,361,624,7,578,649,878,-746,-580,-544,181,93,-711,556,288,-294,963,271,920,-471,-296,311,-393,131,613,729,-173,196,-229,764,695,-659,-874,680,485,-837,599,-22,-830,-630,333,925,636,242,699,-964,-926,-330,-344,613,403,-370,-203,-933,316,96,-486,592,606,-384,-723,-272,-988,-816,-901,-36,792,-908,-40,-917,569,-346,-269,-694,968,113,-713,25,102,-286,-986,833,-386,-253,522,-611,414,-650,729,-63,-868,337,-90,197,851,995,217,-896,-525,-917,433,390,-75,-831,-452,-447,287,-612,214,-878,-725,459,637,745,79,698,-430,-687,104,685,153,-42,-21,-145,-457,349,-724,-9,-853,-170,-384,-516,387,320,862,-449,176,70,33,655,-72,837,364,981,-823,601,-98,628,-378,-206,-276,-222,200,348,537,-467,-466,869,669,679,-238,-300,-312,-830,174,447,483,-168,139,-664,365,-343,-41,-507,721,624,761,-929,-305,658,752,961,450,-842,-174,144,328,109,95,921,-906,-121,-66,-929,-37,-503,889,-506,824,299,-351,856,854,675,301,-607,96,-780,-843,-496,306,693,544,-707,849,130,-2,-259,965,-223,411,-365,-746,479,679,267,-249,82,-834,-172,-663,-897,-904,-381,-301,-926,413,437,-456,163,414,-69,-254,-61,-434,-894,695,188,-976] `shouldBe` 11603
    maxSequence [ 7, 4, 11, -11, 39, 36, 10, -6, 37, -10, -32, 44, -26, -34, 43, 43 ] `shouldBe` 155

  describe "validBraces" $
    it "should work" $ do
    validBraces "()"             `shouldBe` True
    validBraces "[([)"           `shouldBe` False
    validBraces "())({}}{()][][" `shouldBe` False
    validBraces "({})[({})]"     `shouldBe` True

  describe "Sum by Factors" $ do
    it "should work" $ do
      sumOfDivided [12, 15] `shouldBe` [(2,12),(3,27),(5,15)]
      sumOfDivided [15,21,24,30,45] `shouldBe` [(2,54),(3,135),(5,90),(7,21)]
      sumOfDivided [15,21,24,30,-45] `shouldBe` [(2,54),(3,45),(5,0),(7,21)]
      sumOfDivided [107, 158, 204, 100, 118, 123, 126, 110, 116, 100] `shouldBe`
        [(2,1032),(3,453),(5,310),(7,126),(11,110),(17,204),(29,116),(41,123),(59,118),(79,158),(107,107)]
      sumOfDivided [-29804, -4209, -28265, -72769, -31744] `shouldBe`
        [(2,-61548),(3,-4209),(5,-28265),(23,-4209),(31,-31744),(53,-72769),(61,-4209),(1373,-72769),(5653,-28265),(7451,-29804)]
      sumOfDivided [-12, -15] `shouldBe` [(2,-12),(3,-27),(5,-15)]
      sumOfDivided [15,21,24,30,45] `shouldBe` [(2,54),(3,135),(5,90),(7,21)]
      sumOfDivided [-15,21,24,-30,45] `shouldBe` [(2,-6),(3,45),(5,0),(7,21)]
      sumOfDivided [100000, 1000000] `shouldBe` [(2,1100000),(5,1100000)]
      sumOfDivided [100000001, 10000000055] `shouldBe` [(5,10000000055),(17,100000001),(5882353,100000001),(2000000011,10000000055)]
{-  
  describe "decodeMorse" $ do    
    it "should work" $ do
      decodeMorse ".... . -.--   .--- ..- -.. ." `shouldBe` "HEY JUDE"
    it "basic Morse codes" $ do
      decodeMorse ".-" `shouldBe` "A"
      decodeMorse "." `shouldBe` "E"
      decodeMorse ".." `shouldBe` "I"
      decodeMorse ". ." `shouldBe` "EE"
      decodeMorse ".   ." `shouldBe` "E E"
      decodeMorse "...---..." `shouldBe` "SOS"
      decodeMorse "... --- ..." `shouldBe` "SOS"
      decodeMorse "...   ---   ..." `shouldBe` "S O S"
    it "complex tests" $ do
      decodeMorse " . " `shouldBe` "E"
      decodeMorse "   .   . " `shouldBe` "E E"
      decodeMorse "      ...---... -.-.--   - .... .   --.- ..- .. -.-. -.-   -... .-. --- .-- -.   ..-. --- -..-   .--- ..- -- .--. ...   --- ...- . .-.   - .... .   .-.. .- --.. -.--   -.. --- --. .-.-.-     " `shouldBe` "SOS! THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG."

  describe "Tests" $ do
    it "Example" $ do
      decode "1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011" `shouldBe` "HEY JUDE"
    it "Basic bits decoding" $ do
      decode "1" `shouldBe` "E"
      decode "101" `shouldBe` "I"
      decode "10001" `shouldBe` "EE"
      decode "10111" `shouldBe` "A"
      decode "1110111" `shouldBe` "M" 
    it "Multiple bits per dot handling" $ do
      decode "111" `shouldBe` "E"
      decode "1111111" `shouldBe` "E"
      decode "110011" `shouldBe` "I"
      decode "111000111" `shouldBe` "I"
      decode "111110000011111" `shouldBe` "I"
      decode "111000000000111" `shouldBe` "EE"
      decode "11111100111111" `shouldBe` "M"
      decode "111000111000111" `shouldBe` "S"
      decode "111111000000111111000000111111000000111111000000000000000000111111000000000000000000111111111111111111000000111111000000111111111111111111000000111111111111111111000000000000000000000000000000000000000000111111000000111111111111111111000000111111111111111111000000111111111111111111000000000000000000111111000000111111000000111111111111111111000000000000000000111111111111111111000000111111000000111111000000000000000000111111" `shouldBe` "HEY JUDE"
    it "Extra zeros handling" $ do
      decode "01110" `shouldBe` "E"
      decode "000000011100000" `shouldBe` "E"
    it "Long messages handling" $ do
      decode "00011100010101010001000000011101110101110001010111000101000111010111010001110101110000000111010101000101110100011101110111000101110111000111010000000101011101000111011101110001110101011100000001011101110111000101011100011101110001011101110100010101000000011101110111000101010111000100010111010000000111000101010100010000000101110101000101110001110111010100011101011101110000000111010100011101110111000111011101000101110101110101110" `shouldBe` "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG."
      decode`shouldBe` "THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG."
-}